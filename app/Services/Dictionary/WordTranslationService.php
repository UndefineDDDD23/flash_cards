<?php

namespace App\Services\Dictionary;

use App\Models\Languages\Language;
use App\Models\Dictionary\Translation;
use App\Models\Dictionary\DictionaryElement;
use App\Contracts\Dictionary\WordTranslationServiceInterface;

/**
 * Class WordTranslationService
 * 
 * Provides functionality for validating and creating dictionary entries
 * along with their translations.
 */
class WordTranslationService implements WordTranslationServiceInterface {

    /**
     * Validate that the provided array contains all required keys
     * and that the data is in the correct format.
     *
     * @param array $data The dictionary element data to validate.
     * @return bool True if the data is valid, otherwise false.
     */
    public function isValidDictionaryElementData(array $data): bool
    {
        // Required keys that must be present in the data
        $requiredKeys = [
            'element_text',
            'translated_element_text',
            'meaning',
            'translated_meaning',
            'synonyms',
            'translated_synonyms',
            'examples',
            'translated_examples',
            'how_to_use',
            'translated_how_to_use',
        ];

        // Check that all required keys exist
        foreach ($requiredKeys as $key) {
            if (!array_key_exists($key, $data)) {
                return false;
            }
        }

        // Fields that must be non-empty strings
        $stringFields = [
            'element_text',
            'translated_element_text',
            'meaning',
            'translated_meaning',
            'how_to_use',
            'translated_how_to_use',
        ];
        foreach ($stringFields as $field) {
            if (!is_string($data[$field]) || trim($data[$field]) === '') {
                return false;
            }
        }

        // Fields that must be associative arrays with non-empty string keys and values
        $dictFields = ['synonyms', 'translated_synonyms', 'examples', 'translated_examples'];
        foreach ($dictFields as $field) {
            if (!is_array($data[$field]) || empty($data[$field])) {
                return false;
            }

            // Validate each key-value pair in the dictionary fields
            foreach ($data[$field] as $key => $value) {
                if (!is_string($key) || trim($key) === '' || !is_string($value) || trim($value) === '') {
                    return false;
                }
            }
        }

        return true;
    }

    /**
     * Create a dictionary element and its translation in the database.
     *
     * @param array $data The dictionary element data.
     * @param Language $toLanguage The target translation language.
     * @param Language $fromLanguage The source/original language.
     * @param bool $isAiGenerated Whether this entry was generated by AI.
     * @return DictionaryElement The created dictionary element.
     * @throws \InvalidArgumentException If the provided data is invalid.
     */
    public function createDictionaryEntry(array $data, Language $toLanguage, Language $fromLanguage, bool $isAiGenerated = false): DictionaryElement
    {        
        // Validate the provided data before creating the entries
        if(!$this->isValidDictionaryElementData($data)) {
            throw new \InvalidArgumentException('Invalid dictionary element data provided.');
        }

        // Create the dictionary element (original word/phrase)
        $element = DictionaryElement::create([            
            'language_id'       => $fromLanguage->id, 
            'meaning'           => $data['meaning'],
            'how_to_use'        => $data['how_to_use'], 
            'element_text'      => $data['element_text'],
            'synonyms'          => json_encode($data['synonyms']), 
            'examples'          => json_encode($data['examples']), 
            'is_ai_generated'   => $isAiGenerated
        ]);

        // Create the translation for the dictionary element
        $translation = Translation::create([
            'dictionary_element_id'     => $element->id, 
            'translation_language_id'   => $toLanguage->id,
            'translated_element_text'   => $data['translated_element_text'], 
            'translated_meaning'        => $data['translated_meaning'],
            'translated_how_to_use'     => $data['translated_how_to_use'], 
            'translated_synonyms'       => json_encode($data['translated_synonyms']), 
            'translated_examples'       => json_encode($data['translated_examples']), 
        ]);

        return $element;
    }
}
